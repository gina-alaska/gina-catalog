/**
 * @class Manager.view.catalog.Form
 * @extends Ext.panel.Panel
 * Edit Panel for Projects
 */
Ext.define('Manager.shared_view.catalog.Form', {
    extend: 'Ext.form.Panel', 
    alias: 'widget.catalog_form',

    config: {
      recordId: null,
      recordType: 'project'
    },
    
    titleTpl: new Ext.Template('Edit {id}::{title}'),

    constructor: function(config) {
      this.initConfig(config);
      this.callParent(arguments);
    },

    initComponent: function() {
      this.link_count = 0;
      this.location_count = 0;
   
      var links = [];
      Ext.apply(this, {
        title: 'Loading...',
        autoScroll: true,
        closable: true,
        border: true,
        fieldDefaults: { anchor: '100%', labelAlign: 'top' },
        defaults: { bodyStyle: 'padding: 3px;', layout: 'anchor', margin: '3 3 0 3' },
        dockedItems: [{
          xtype: 'toolbar', dock: 'bottom', ui: 'footer', cls: 'edit',
          defaults: { scale: 'large', minWidth: 100 },
          items: ['->', 
            { text: 'Cancel',action: 'cancel'}, 
            { text: 'Publish', action: 'publish'},
            { text: 'Save', action: 'save' }
          ]
        }],
        items: [{
          border: false,
          layout: { type: 'hbox', align: 'stretch' },
          bodyStyle: 'padding: 0',
          defaults: { layout: 'anchor', bodyStyle: 'padding: 3px;', flex: 1 },
          items: [{
            flex: 2,
            itemId: 'general', title: 'Description', margins: '0 3 0 0',
            xtype: (this.recordType == 'project' ? 'catalog_project_form_panel' : 'catalog_asset_form_panel')
          }, {
            itemId: 'properties', title: 'Properties', margins: '0 3 0 0',
            xtype: 'catalog_properties_form_panel'
          }, {
            itemId: 'tags', title: 'Tags',
            xtype: 'catalog_tags_form_panel'
          }]
        }, {
          border: false,
          layout: { type: 'hbox', align: 'stretch' },
          bodyStyle: 'padding: 0',
          defaults: {  bodyStyle: 'padding: 3px;', flex: 1 },
          items: [{
            itemId: 'agencies', xtype: 'catalog_agency_form_panel', title: 'Agencies', margins: '0 3 0 0'
          }, {
            itemId: 'contacts', xtype: 'catalog_contact_form_panel', title: 'Contacts' 
          }]
        }, {
          itemId: 'links', xtype: 'catalog_links_form_panel', title: 'Links'
        },{
          itemId: 'locations', xtype: 'catalog_location_form_panel', title: 'Locations'

        }]
      });     

      this.callParent(arguments);

      this.getForm().trackResetOnLoad = true;

      if(this.getRecordId()) {
        this.on('render', function() { this.getEl().mask("Please Wait..") }, this, {delay: 100, single:true} );
        Ext.Ajax.request({
          url: '/catalog/' + this.getRecordId() + '.json',
          success: this.onRequestSuccess,
          scope: this
        });        
      } else {
        this.setTitle('New Project');
      }
      this.on('dirtychange', this.toggleButtons, this);
    },  
    
    buildLink: function(link){
      Ext.applyIf(link, {
        id: '',
        category: '',
        display_text: '',
        url: ''
      });
      
      var link_markup = {
        xtype: 'fieldcontainer',
        role: 'link',
        layout: { type: 'hbox', defaultMargins: { right: 3 } },
        fieldDefaults: { labelAlign: 'top' },
        items: [{
          xtype: 'hiddenfield', name: 'links_attributes['+this.link_count+'][id]', value: link.id
        }, {
          flex: 1,
          xtype: 'combobox', fieldLabel: 'Category', name: 'links_attributes['+ this.link_count +'][category]', 
          queryMode: 'local', store: 'LinkCategories',  displayField: 'category', valueField: 'category', 
          value: link.category
        }, {
          xtype: 'textfield', fieldLabel: 'Text', flex: 2,
          name: 'links_attributes['+ this.link_count + '][display_text]', value: link.display_text
        }, {
          xtype: 'textfield', fieldLabel: 'URL', flex: 10,
          name: 'links_attributes['+ this.link_count + '][url]', value: link.url
        }, {
          xtype: 'fieldcontainer',
          layout: 'hbox',
          flex: 1,
          fieldLabel: 'Actions',
          items: [{
            xtype: 'button', text: 'Remove', flex: 1, action: 'remove_link', linkId: link.id
          }]
        }]
      };   
      this.link_count += 1;
      return link_markup;     
    },
    
    onRequestSuccess: function(response){
      this.loadRecordData(Ext.JSON.decode(response.responseText));
    },
    
    loadRecordData: function(record){
      this.record = record;
      this.setTitle(this.titleTpl.apply(this.record));
      this.getForm().setValues(this.record);
      
      this.down('#links').removeAll();
      Ext.each(this.record.links, this.addLink, this);
      var locations = this.down('#locations');
      locations.removeAll();
      Ext.each(this.record.locations, locations.addLocation, locations);

      if(record.published_at != null && Date.parse(record.published_at) <= Date.now() ){
        this.down('button[action="publish"]').setText('Unpublish');
      }
      else {
        this.down('button[action="publish"]').setText('Publish');
      }
      this.down('button[action="save"]').disable();
      this.getEl().unmask();  
    },
    
    addLink: function(link){
      this.down('#links').add(this.buildLink(link));      
    },

    toggleButtons: function(form, dirty) {
      if(dirty) {
        this.down('button[action="save"]').enable();
        this.down('button[action="publish"]').disable();
      } else {
        this.down('button[action="save"]').disable();
        this.down('button[action="publish"]').enable();
      }
    }
});