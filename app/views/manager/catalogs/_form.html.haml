.row-fluid
  .section-nav.span4
    %ul.manager-edit-navigation.nav.nav-list{ data: { spy: 'affix', 'offset-top' => 100 }}
      - sections = %w{ general contacts agencies tags collections links locations sds downloads actions }
      - sections.each do |section|
        %li{class: (section == sections.first ? 'active' : '')}
          = link_to section.humanize, "##{section}"
      
  .span8
    = nested_form_for [:manager, @catalog], html: { class: 'form' } do |f|
      - unless @catalog.errors.full_messages.empty?
        .alert.alert-error
          %h4 Errors prevents this record from being saved
          %ul
            - @catalog.errors.full_messages.each do |err|
              %li= err
      #general
        %h2 General
        = render 'general_fields', f: f
        
      #contacts
        %h2 Contacts
        = render 'contact_fields', f: f
    
      #agencies
        %h2 Agencies
        = render 'agency_fields', f: f
    
      #tags
        %h2 Tags
        = render 'tag_fields', f: f

      #collections
        %h2 Collections
        = render 'collection_fields', f: f

      #links 
        .pull-right
          = f.link_to_add :links, :data => { :target => "#links" }, class: "btn btn-success" do
            %i.icon-plus.icon-white
            Add a Link
        %h2 Links
        .header.row-fluid
          .span2 Category
          .span4 Display Text
          .span4 URL
          .span2.actions Actions
        .body
          .links
            = f.fields_for :links
    
      #locations
        .pull-right
          = f.link_to_add :locations, :data => { :target => "#locations" }, class: "btn btn-success" do
            %i.icon-plus.icon-white
            Add a Location
        %h2 Locations
        .header.row-fluid
          .span4 Name
          .span6 WKT
          .span2.actions Actions
        .body
          .locations
            = f.fields_for :locations

      #sds
        %h2 Secure Data System
        = render 'sds_fields', f: f
      
      #downloads
        .pull-right
          = f.link_to_add :download_urls, :data => { :target => "#downloads" }, class: "btn btn-success" do
            %i.icon-plus.icon-white
            Add Download URL
        %h2 Downloads/Files
        .header.row-fluid
          .span4 Name
          .span6 URL
          .span2.actions Actions
        .body
          .downloads
            = f.fields_for :download_urls

      #actions.form-actions
        = link_to [:manager, @catalog], class: 'btn btn-inverse' do
          %i.icon-arrow-left.icon-white
          Back
          
        = f.submit class: 'btn btn-primary pull-right'

#location_editor.modal.hide.fade
  .modal-header
    %button.close{ type: 'button', data: { dismiss: 'modal' } } &times;
    %h3 Location Editor
  #map.modal-body{ style: 'position: relative; padding: 0; height:400px;', data: { openlayers: 'map_canvas', projection: 'EPSG:3338', layers: 'TILE.EPSG:3338.*' } }
    .navbar.navbar-static-top
      .navbar-inner
        .btn-group{ data: { toggle: 'buttons-radio' } }
          %button.btn{ data: { "openlayers-action" => 'draw', type: 'polygon' } }
            Polygon
          %button.btn{ data: { "openlayers-action" => 'draw', type: 'point' } }
            Point
        .btn-group
          %button.btn{ data: { "openlayers-action" => 'clear' } }
            Clear
          %button.btn{ data: { "openlayers-action" => 'reset' } }
            Reset  
    #map_canvas{style: "width:100%; height: 359px;" }
  .modal-footer
    = link_to '#', class: 'btn', data: { dismiss: 'modal' } do
      Cancel
    = link_to '#', class: 'btn btn-primary', data: { 'openlayers-action' => 'update-location' } do
      Update location
    

/ refresh because of select2 moving things around on the page
:javascript
  $(document).ready(function() {
    $('[data-spy="scroll"]').each(function() {
      $(this).delay(500).scrollspy('refresh');
    });
    
    var input, feature, active_draw_button;
    var catalog_map = $('#map').data('map');
    var map = catalog_map.map;
    
    var editor = new LocationEditor(map);
    catalog_map.addBtnHandler('clear', function() { editor.clear(); });
    catalog_map.addBtnHandler('reset', function() { editor.addFeature(); });
    catalog_map.addBtnHandler('draw', function(evt, el) { editor.drawFeature($(el).data('type')); });
    
    $('#location_editor').on('shown', function() {
      map.updateSize();
    });
    
    $(document).on('click', '[data-openlayers-action="edit-location"]', function(evt) {
      evt.preventDefault();
      
      input = $($(this).data('target'));
      var feature = editor.addFeature(input);      
      $('#location_editor').modal('show');
      
      if(feature) {
        switch(feature.geometry.CLASS_NAME) {
          case 'OpenLayers.Geometry.Polygon':
            active_draw_button = $('#location_editor button[data-type="polygon"]').button('toggle');
            break;
          case 'OpenLayers.Geometry.Point':
            active_draw_button = $('#location_editor button[data-type="point"]').button('toggle');
            break;
        }
      } else {
        $('#location_editor button.active[data-openlayers-action="draw"]').removeClass('active');
      }
    });
    
    $(document).on('click', '.btn[data-openlayers-action="update-location"]', function(evt) {
      evt.preventDefault();
      input.val(editor.getWKT());      
      $('#location_editor').modal('hide');
    });
  })
  
