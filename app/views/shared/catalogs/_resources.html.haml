%h4 Data and Resources
%ul.media-list.catalog-resources
  - catalog.uploads.downloadable.each do |upload|
    %li.media
      .icon.download.pull-left
        %i.icon-download-alt
      .media-body
        = link_to catalog_download_path(catalog, upload), class: 'btn tag pull-right', rel: "nofollow", remote: true do
          %i.icon-download-alt.media-object
          Download

        %h5.media-heading
          Download
          = " :: #{upload.description}" if upload.description.present?
        %p.break-url
          = upload.file.name
          = "(#{number_to_human_size upload.file.size})"
  - catalog.download_urls.each do |link|
    %li.media
      .icon.download.pull-left
        %i.icon-download-alt
      .media-body
        = link_to catalog_download_path(catalog, link), class: 'btn tag pull-right', rel: "nofollow", remote: true do
          %i.icon-download-alt.media-object
          Download

        - if link.name
          %h5.media-heading.break-url
            = "#{link.name}"
        - else
          %h5.media-heading.break-url Remote Download
        %p.break-url= File.basename(link.url)

  - catalog.links.where('category = ?', 'Download').each do |link|
    %li.media
      .icon.download.pull-left
        %i.icon-download-alt
      .media-body
        = link_to link.url, class: 'btn tag pull-right', rel: "nofollow", remote: true do
          %i.icon-download-alt.media-object
          Download

        %h5.media-heading
          - download_text = "Download"
          - download_text = download_text + " :: #{link.display_text}" unless link.display_text.empty?
          = download_text
        %p.break-url= link.url

  - catalog.links.where('category in (?)', ['Report']).each do |link|
    %li.media
      .icon.report.pull-left
        %i.icon-file
      .media-body
        = link_to link.url, class: 'btn pull-right', :target => :_blank do
          %i.icon-external-link
          View report

        %h5.media-heading
          = link.category
          - unless link.display_text.empty? or link.display_text == link.url
            = " :: #{link.display_text}"

        %p.break-url= link.url
  - catalog.links.where('category not in (?)', ['Metadata', 'Download', 'Report']).order('category').each do |link|
    %li.media
      .icon.website.pull-left
        %i.icon-cloud
      .media-body
        = link_to link.url, class: 'btn pull-right', :target => :_blank do
          %i.icon-external-link
          View
          = link.category.downcase

        %h5.media-heading
          = link.category
          - unless link.display_text.empty? or link.display_text == link.url
            = " :: #{link.display_text}"
        %p.break-url= link.url

- if catalog.links.where('category = ?', 'Metadata').count > 0
  %ul.media-list.catalog-resources
    - catalog.links.where('category = ?', 'Metadata').each do |link|
      %li.media
        .icon.metadata.pull-left
          %i.icon-file
        .media-body
          = link_to link.url, class: 'btn pull-right', :target => :_blank do
            %i.icon-external-link
            View metadata

          %h5.media-heading.break-url
            = link.category
            - unless link.display_text.empty? or link.display_text == link.url
              = " :: #{link.display_text}"
          %p.break-url= link.url
